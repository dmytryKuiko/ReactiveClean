apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: "de.mannodermaus.android-junit5"

android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId "com.example.dimi.reactiveclean"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {
        debug {
            buildConfigField 'String', "API_KEY", ReactiveClean_newsApiKeyDecoded //for Code
            resValue 'string', "API_KEY", ReactiveClean_newsApiKeyDecoded
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            buildConfigField 'String', "API_KEY", ReactiveClean_newsApiKeyDecoded
            resValue 'string', "API_KEY", ReactiveClean_newsApiKeyDecoded
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

kapt {
    correctErrorTypes = true
}

sourceSets {
    main.java.srcDirs += [file("$buildDir/generated/source/kapt/main")]
}

project.ext {
    spekVersion = "1.1.5"
    mockitoKotlinVersion = "2.0.0-alpha02"
    kluentVersion = "1.34"
}

android.testOptions {
    junitPlatform {
        filters {
            engines {
                include 'spek'
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.android.support:appcompat-v7:$rootProject.buildToolsVersion"
    implementation "com.android.support:recyclerview-v7:$rootProject.buildToolsVersion"
    implementation "com.android.support:support-v4:$rootProject.buildToolsVersion"
    implementation "com.android.support:design:$rootProject.buildToolsVersion"
    implementation "com.android.support:customtabs:$rootProject.buildToolsVersion"
    implementation "com.android.support.constraint:constraint-layout:$rootProject.constraintLayoutVersion"
    implementation "com.android.support:support-v4:$rootProject.buildToolsVersion"
    testImplementation "junit:junit:$rootProject.junitVersion"
    androidTestImplementation "com.android.support.test:runner:$rootProject.runnerVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.espressoVersion"

    //Hamcrest Matchers
    testImplementation "org.hamcrest:hamcrest-library:$rootProject.hamcrestVersion"

    //Kotlin reflections
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    //Mockito
    implementation "org.mockito:mockito-core:$rootProject.mockitoVersion"

    //LiveData and ViewModel
    implementation "android.arch.lifecycle:extensions:$rootProject.archComponentsLifeCycleVersion"

    //LifeCycles
    implementation "android.arch.lifecycle:runtime:$rootProject.archComponentsLifeCycleVersion"
    kapt "android.arch.lifecycle:compiler:$rootProject.archComponentsLifeCycleVersion"

    //LiveData with ReactiveStreams
    implementation "android.arch.lifecycle:reactivestreams:$rootProject.archComponentsLifeCycleVersion"

    //LiveData testing
    testImplementation "android.arch.core:core-testing:$rootProject.archComponentsLifeCycleVersion"

    //Room
    implementation "android.arch.persistence.room:runtime:$rootProject.archComponentsRoomVersion"

    //Room RxJava
    implementation "android.arch.persistence.room:rxjava2:$rootProject.archComponentsRoomVersion"
    kapt "android.arch.persistence.room:compiler:$rootProject.archComponentsRoomVersion"


    //Leak canary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$rootProject.leakCanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.leakCanaryVersion"

    //Dagger
    implementation "com.google.dagger:dagger:$rootProject.daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$rootProject.daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$rootProject.daggerVersion"

    //Rx
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.rxAndroidVersion"
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.rxJavaVersion"

    //RxBindings
    implementation "com.jakewharton.rxbinding2:rxbinding-appcompat-v7-kotlin:$rootProject.rxBindingVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding:$rootProject.rxBindingVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding-support-v4-kotlin:$rootProject.rxBindingVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding-recyclerview-v7:$rootProject.rxBindingVersion"

    //RxRelay
    implementation "com.jakewharton.rxrelay2:rxrelay:$rootProject.rxRelayVersion"

    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$rootProject.retrofitVersion"

    //GSON
    implementation "com.google.code.gson:gson:$rootProject.gsonVersion"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.retrofitConverterGsonVersion"

    //OkHttp
    implementation "com.squareup.okhttp3:okhttp:$rootProject.okHttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.okHttpVersion"

    //Timber
    implementation "com.jakewharton.timber:timber:$rootProject.timberVersion"

    //Cicerone
    implementation "ru.terrakok.cicerone:cicerone:$rootProject.ciceroneVersion"

    //Picasso
    implementation "com.squareup.picasso:picasso:$rootProject.picassoVersion"

    //AdapterDelegates
    implementation "com.hannesdorfmann:adapterdelegates3:$rootProject.adapterDelegatesVersion"

    //JodaTime
    implementation "joda-time:joda-time:$rootProject.jodaTimeVersion"

    //Spek
    testImplementation("org.jetbrains.spek:spek-api:$spekVersion") {
        exclude group: "org.jetbrains.kotlin"
    }
    testImplementation("org.jetbrains.spek:spek-junit-platform-engine:$spekVersion") {
        exclude group: "org.junit.platform"
        exclude group: "org.jetbrains.kotlin"
    }
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    testImplementation junit5.unitTests()
    testCompileOnly junit5.unitTestsRuntime()
}